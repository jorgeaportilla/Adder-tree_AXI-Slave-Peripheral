#include <stdio.h>
#include "platform.h"
//#include "xil_printf.h"
#include "xil_io.h"
#include "sleep.h"
#define CUSTOM_IP_BASEADDR 0x44a00000
#define REGISTER_1_OFFSET 0x00
#define REGISTER_2_OFFSET 0x04  //4
#define REGISTER_3_OFFSET 0X100 //256
#define REGISTER_4_OFFSET 0x080 //128
#define REGISTER_i_OFFSET 0xFF //255

// Function prototypes
void set_custom_ip_register(int baseaddr, int offset, int value);
int get_custom_ip_register(int baseaddr, int offset);
int temp1, temp2, temp3,temp4,temp5,temp6,temp7 = 0;
int OPERATION;
//int data1[] = { 1,2,3,4,5,6};
//int data2[] = { 0,0,0,0,0,0};

int main()
{
    init_platform();
	printf("BRAM1 write data... \n"); //255 send data to BRAM1
	for (int i= 0; i <2; i++ ) {//254 send data to BRAM2
	set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_1_OFFSET, 0xFF);
	for (int i= 0; i <256; i++ ) {
		set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_1_OFFSET, i);
	}
	printf("BRAM2 write data... \n"); //254 send data to BRAM2
	set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_1_OFFSET, 0xFE);
	for (int i= 0; i <256; i++ ) {
		set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_1_OFFSET, 0x00);
	}}
	/* Select operation ....
	 0xFA manDist
	 0xF8 Sum
	 0xF9 Prom
	 */
	OPERATION = 0xFA;
	set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_1_OFFSET, OPERATION);
	set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_1_OFFSET, OPERATION);
    temp2 = 	get_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_1_OFFSET );



    if (OPERATION == 0xFA)
    	printf("manDist = %d\n", temp2);
    else if (OPERATION == 0xF8){
    	printf("Sum  = ");
    	for (int i=6; i <262; i++ ) {
    		temp1 = 	get_custom_ip_register(CUSTOM_IP_BASEADDR, i);
    		printf("%d, ", temp1);
    	}}
    else{
    	printf("Prom  = ");
    	for (int i= 261; i <517; i++ ) {
    		temp1 = 	get_custom_ip_register(CUSTOM_IP_BASEADDR, i);
    		printf("%d, ", temp1);
    	}
    }
    	cleanup_platform();
    return 0;
}

void set_custom_ip_register(int baseaddr, int offset, int value)
{
	Xil_Out32(baseaddr + offset, value);
}

int get_custom_ip_register(int baseaddr, int offset)
{
	int temp = 0;
	temp = Xil_In32(baseaddr + offset);
	return (temp);
}
