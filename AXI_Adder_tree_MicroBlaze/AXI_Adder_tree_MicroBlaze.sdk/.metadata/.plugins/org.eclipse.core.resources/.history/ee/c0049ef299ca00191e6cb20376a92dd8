/*
 * adder_tree.c
 *
 *  Created on: 27-08-2019
 *      Author: jorge
 */
/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

#include <stdio.h>
#include "platform.h"
#include "xil_io.h"
#include "sleep.h"
#include "mb_interface.h"
#include "xtmrctr_l.h"
#include <string.h>

#define CUSTOM_IP_BASEADDR 0x44a00000
#define REGISTER_1_OFFSET 0x00
#define REGISTER_2_OFFSET 0x04  //4
#define REGISTER_3_OFFSET 0X100 //256
#define REGISTER_4_OFFSET 0x080 //128
#define REGISTER_5_OFFSET 0x05
#define REGISTER_i_OFFSET 0xFF //255

// Function prototypes
void set_custom_ip_register(int baseaddr, int offset, int value);
int get_custom_ip_register(int baseaddr, int offset);
int temp1, temp2 = 0;
int OPERATION;                                                          //25 =19 hex     to 30 = 1E
int v [8]= {};

unsigned char *dir[5] = {0x00,0x01,0x02,0x03,0x04,0x05};

//		"0x00","0x01","0x02","0x03","0x04","0x05","0x06","0x07","0x08","0x09","0x0A","0x0B","0x0C","0x0D","0x0E","0x0F","0x010","0x012","0x013","0x014","0x015","0x016","0x017","0x018","0x019", "0x01A", "0x01B","0x01C","0x01D", "0x01E"};

//};
int main()
{
	static int tic = 0;
	XTmrCtr_Enable(XPAR_TMRCTR_0_BASEADDR,1);
	tic = XTmrCtr_GetTimerCounterReg(XPAR_TMRCTR_0_BASEADDR,1);
    init_platform();
    //Write data
	printf("BRAM1 write data... \n"); //255 send data to BRAM1                                     //254 send data to BRAM2
	for (int k= 0; k < 2; k++ ) {
	set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_4_OFFSET, 0xFF);
	for (int i= 0; i <256; i++ ) {
       // if(i < 50)		set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_4_OFFSET, 0x02);
	//	else
		set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_4_OFFSET, 0x03);
	}
	printf("BRAM2 write data... \n"); //254 send data to BRAM2
	set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_4_OFFSET, 0xFE);
	for (int i= 0; i <256; i++ ) {
		set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_4_OFFSET, 0x00);
	}}
	/* Select operation ....0xFA manDist, 0xF8 Sum, 0xF9 Prom	 */
	OPERATION = 0xFA;
	set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_4_OFFSET, OPERATION);
	set_custom_ip_register(CUSTOM_IP_BASEADDR, REGISTER_4_OFFSET, OPERATION);
    temp2 = 	get_custom_ip_register(CUSTOM_IP_BASEADDR,  dir[4]);
    printf(" dir: %d , %X  \n", temp2, dir[4]);
    temp2 = 	get_custom_ip_register(CUSTOM_IP_BASEADDR,  REGISTER_5_OFFSET );
    if (OPERATION == 0xFA)
    	printf("manDist = %d\n", temp2);
    else if (OPERATION == 0xF8){
    	printf("Sum  = ");
    	for (int i= 6; i <261; i++ ) {
    		temp2 = 	get_custom_ip_register(CUSTOM_IP_BASEADDR, i);
    		//printf("dir:  %d, val: %d \n",i, temp2);
    		printf(" %d ", temp2);
    	}}
    else{
    	printf("Prom  = ");
    	for (int j= 256; j < 356; j++ ) {
    		temp2 = 	get_custom_ip_register(CUSTOM_IP_BASEADDR, j);
    		//printf("dir:  %d, val: %d \n",j, temp2);
    		printf(" %d ", temp2);
    	}
    }

    tic = XTmrCtr_GetTimerCounterReg(XPAR_TMRCTR_0_BASEADDR,1)-tic;
    xil_printf("Elapsed time : %d  Clock Cycles\n", tic);
    cleanup_platform();
    return 0;
}

void set_custom_ip_register(int baseaddr, int offset, int value)
{
	Xil_Out32(baseaddr + offset, value);
}

int get_custom_ip_register(int baseaddr, int offset)
{
	int temp = 0;
	temp = Xil_In32(baseaddr + offset);
	return (temp);
}

