/* Adder-tree_AXI-Slave-Peripheral
 *
 The design of a specialized coprocessor based on an adder tree is described, using the Xilinx Vivado tools to create custom AXI-lite slave peripherals. In addition, measurements of execution times are made.
 *
 UTFSM
 DISEÃ‘O AVANZADO DE SISTEMAS DIGITALES
 Jorge Portilla-Jesus Ortiz
 IPD-432
 * */
#include <stdio.h>
#include "platform.h"
#include "xil_io.h"
#include "sleep.h"
#include "mb_interface.h"
#include "xtmrctr_l.h"
#include <string.h>

#define CUSTOM_IP_BASEADDR 0x44a00000
#define REGISTER_1_OFFSET 0x00
#define RESET_VALUE	 0xF0000000

// Function prototypes
void set_custom_ip_register(int baseaddr, int offset, int value);
int get_custom_ip_register(int baseaddr, int offset);
int vec2[256],vec1[256],man[256];
int dman=0;
int temp1, temp2= 0;
int OPERATION;

int main()
{
	init_platform();
	static int tic = 0;
	/* reset the timers, and clear interrupts */
	//XTmrCtr_mSetControlStatusReg(XPAR_TMRCTR_0_BASEADDR, 1,XTC_CSR_INT_OCCURED_MASK | XTC_CSR_LOAD_MASK );
	XTmrCtr_SetLoadReg(XPAR_TMRCTR_0_BASEADDR, 1, RESET_VALUE);
	XTmrCtr_Enable(XPAR_TMRCTR_0_BASEADDR,1);
    tic = XTmrCtr_GetTimerCounterReg(XPAR_TMRCTR_0_BASEADDR,1);
    for (int i=0;i<256;i++){
	 vec1[i]=1;
	}
	for (int i=0;i<256;i++){
	 vec2[i]=0;
    }
	printf("\n Vec1 =");
	for (int i=0;i<=255;i++){
		printf(" %d ", vec1[i]);
	}
	printf("\n Vec2 = ");
	for (int j=0;j<=255;j++){
	  printf("  %d ", vec2[j]);
	}

	for (int k=0;k<=255;k++){
	 	if(vec1[k]<vec2[k])	  	{
	   		man[k]=vec2[k]-vec1[k];
	   	}else	   	{
	   		man[k]=vec1[k]-vec2[k];
	   	}
	 }
	   for (int j=0;j<=255;j++)
	   {
	   	printf("  %d ", man[j]);
	   }
	   for (int j=0;j<=255;j++)
	   {
	   	dman=dman+man[j];
	   }
	printf("manDist =  %d ", dman);
    tic = XTmrCtr_GetTimerCounterReg(XPAR_TMRCTR_0_BASEADDR,1)-tic;
    printf("\n Elapsed time : %d  Clock Cycles\n", tic);
    //XTmrCtr_SetResetValue(XPAR_TMRCTR_0_BASEADDR, 1, RESET_VALUE);
    //XTmrCtr_SetLoadReg(XPAR_TMRCTR_0_BASEADDR, 1, RESET_VALUE);
    //XTmrCtr_Stop(XPAR_TMRCTR_0_BASEADDR, 1);
    XTmrCtr_Disable(XPAR_TMRCTR_0_BASEADDR,1);
    cleanup_platform();
    return 0;
}

void set_custom_ip_register(int baseaddr, int offset, int value)
{
	Xil_Out32(baseaddr + offset, value);
}

int get_custom_ip_register(int baseaddr, int offset)
{
	int temp = 0;
	temp = Xil_In32(baseaddr + offset);
	return (temp);
}
